#
# Deploy application reusable workflow
#
# This workflow deploys the given application image (using Helm) into the AKS cluster in the given environment.
#

name: Reusable deploy to k8s cluster

on:
 workflow_call:
  inputs:
    app_name:
      type: string
      required: true 
      description: The name of the application to be deployed. Also used as the helm chart directory.
    image_tag:
      type: string
      required: true
      description: The tag/version of the docker image to be deployed in this workflow.
    namespace_name:
      type: string
      required: false
      description: The name of the k8s namespace to deploy the application to.
      default: applications
    environment_name:
      type: string
      required: true
      description: The name of the environment.
    project_prefix_name:
      type: string
      required: true
      description: The prefix name of the project
  secrets:
    AZURE_CREDENTIALS:
      required: true

jobs:
  download_and_deploy_helm_package:
    env:
      temporary_download_artifact_directory: ./temp/download/packages
      container_registry_domain: ghcr.io
      organization_domain_name: buerokratt
      resource_group_name: ${{ inputs.project_prefix_name }}-${{ inputs.environment_name }}-rg
      k8s_cluster_name: ${{ inputs.project_prefix_name }}-${{ inputs.environment_name }}-aks
      keyvault_name: ${{ inputs.project_prefix_name }}-${{ inputs.environment_name }}-kv

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:       
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create temporary working directory for artifacts
        run: mkdir -p $temporary_download_artifact_directory
  
      - name: Download Helm package artifacts
        uses: actions/download-artifact@v3
        with:
          name: helm-package-${{ github.run_id }}
          path: ${{ env.temporary_download_artifact_directory }}

      # Needed to access the keyvault and store secrets in the k8s cluster, uncomment when ready to use
      - name: Login to Azure
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get secrets from key vault
        uses: Azure/get-keyvault-secrets@v1
        with: 
          keyvault: ${{ env.keyvault_name }}
          secrets: 'CosmosDbKey, CosmosDbAccount, CentOpsAdminApiKey, DmrCentOpsApiKey, AksIngressFqdn, MockBot1CentOpsApiKey, MockBot1ApiKey, MockBot2CentOpsApiKey, MockBot2ApiKey, MockClassifierCentOpsApiKey'
        id: appSecrets
     
      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.resource_group_name }}
          cluster-name: ${{ env.k8s_cluster_name }}

      - name: Deploy to Kubernetes cluster
        run: |
          helm upgrade \
            ${{ inputs.app_name }} \
            $temporary_download_artifact_directory/*.tgz \
            --install \
            --namespace=${{ inputs.namespace_name }} \
            --create-namespace \
            --set image.tag=${{ inputs.image_tag }} \
            --set image.repository=$container_registry_domain/$organization_domain_name/${{ inputs.app_name }} \
            --set ingress.host=${{ steps.appSecrets.outputs.AksIngressFqdn }} \
            --set secrets.centops.cosmosAccount=${{ steps.appSecrets.outputs.CosmosDbAccount }} \
            --set secrets.centops.cosmosKey=${{ steps.appSecrets.outputs.CosmosDbKey }} \
            --set secrets.centops.adminApiKey=${{ steps.appSecrets.outputs.CentOpsAdminApiKey }} \
            --set secrets.dmr.centOpsApiKey=${{ steps.appSecrets.outputs.DmrCentOpsApiKey }} \
            --set secrets.mockBot.apiKey=${{ steps.appSecrets.outputs.MockBot1ApiKey }} \
            --set secrets.mockBot.centOpsApiKey=${{ steps.appSecrets.outputs.MockBot1CentOpsApiKey }} \
            --set secrets.mockClassifier.centOpsApiKey=${{ steps.appSecrets.outputs.MockClassifierCentOpsApiKey }}

      - name: Deploy MockBot2 to Kubernetes cluster
        if: ${{ inputs.app_name }} == 'mock-bot'
        run: |
          helm upgrade \
            ${{ inputs.app_name }}-2 \
            $temporary_download_artifact_directory/*.tgz \
            --install \
            --namespace=${{ inputs.namespace_name }} \
            --create-namespace \
            --set nameOverride=mock-bot-2 \
            --set fullnameOverride=mock-bot-2 \
            --set image.tag=${{ inputs.image_tag }} \
            --set image.repository=$container_registry_domain/$organization_domain_name/${{ inputs.app_name }} \
            --set ingress.host=${{ steps.appSecrets.outputs.AksIngressFqdn }} \
            --set secrets.centops.cosmosAccount=${{ steps.appSecrets.outputs.CosmosDbAccount }} \
            --set secrets.centops.cosmosKey=${{ steps.appSecrets.outputs.CosmosDbKey }} \
            --set secrets.centops.adminApiKey=${{ steps.appSecrets.outputs.CentOpsAdminApiKey }} \
            --set secrets.dmr.centOpsApiKey=${{ steps.appSecrets.outputs.DmrCentOpsApiKey }} \
            --set secrets.mockBot.apiKey=${{ steps.appSecrets.outputs.MockBot2ApiKey }} \
            --set secrets.mockBot.centOpsApiKey=${{ steps.appSecrets.outputs.MockBot2CentOpsApiKey }} \
            --set secrets.mockClassifier.centOpsApiKey=${{ steps.appSecrets.outputs.MockClassifierCentOpsApiKey }}